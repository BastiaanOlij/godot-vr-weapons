[gd_resource type="VisualShader" load_steps=15 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=2]
uniform_name = "Outline"

[sub_resource type="VisualShaderNodeVectorOp" id=3]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "FresnelStrength"

[sub_resource type="VisualShaderNodeVectorOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeColorUniform" id=6]
uniform_name = "AlbedoColor"

[sub_resource type="VisualShaderNodeTextureUniform" id=7]
output_port_for_preview = 0
uniform_name = "Albedo"
texture_type = 1

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
output_port_for_preview = 0
uniform_name = "Normal"
texture_type = 2

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "uv"

[sub_resource type="VisualShaderNodeScalarUniform" id=10]
uniform_name = "Metallic"

[sub_resource type="VisualShaderNodeScalarUniform" id=11]
uniform_name = "Roughness"

[sub_resource type="VisualShaderNodeFresnel" id=12]

[sub_resource type="VisualShaderNodeInput" id=13]
input_name = "normal"

[sub_resource type="VisualShaderNodeInput" id=14]
input_name = "view"

[resource]
code = "shader_type spatial;
uniform sampler2D Albedo : hint_albedo;
uniform vec4 AlbedoColor : hint_color;
uniform float Metallic;
uniform float Roughness;
uniform vec4 Outline : hint_color;
uniform float FresnelStrength;
uniform sampler2D Normal : hint_normal;



void vertex() {
// Output:0

}

void fragment() {
// Input:4
	vec3 n_out4p0;
	n_out4p0 = vec3(UV,0.0);

// TextureUniform:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 n_tex_read = texture( Albedo , n_out4p0.xy );
		n_out2p0 = n_tex_read.rgb;
		n_out2p1 = n_tex_read.a;
	}

// ColorUniform:15
	vec3 n_out15p0;
	float n_out15p1;
	n_out15p0 = AlbedoColor.rgb;
	n_out15p1 = AlbedoColor.a;

// VectorOp:14
	vec3 n_out14p0;
	n_out14p0 = n_out2p0 * n_out15p0;

// ScalarUniform:5
	float n_out5p0;
	n_out5p0 = Metallic;

// ScalarUniform:6
	float n_out6p0;
	n_out6p0 = Roughness;

// Input:8
	vec3 n_out8p0;
	n_out8p0 = NORMAL;

// Input:9
	vec3 n_out9p0;
	n_out9p0 = VIEW;

// Fresnel:7

bool n_in7p2 = false;
	float n_in7p3 = 1.00000;
	float n_out7p0;
	n_out7p0 = n_in7p2 ? (pow(clamp(dot(n_out8p0, n_out9p0), 0.0, 1.0), n_in7p3)) : (pow(1.0 - clamp(dot(n_out8p0, n_out9p0), 0.0, 1.0), n_in7p3));
// ColorUniform:11
	vec3 n_out11p0;
	float n_out11p1;
	n_out11p0 = Outline.rgb;
	n_out11p1 = Outline.a;

// VectorOp:10
	vec3 n_out10p0;
	n_out10p0 = vec3(n_out7p0) * n_out11p0;

// ScalarUniform:13
	float n_out13p0;
	n_out13p0 = FresnelStrength;

// VectorOp:12
	vec3 n_out12p0;
	n_out12p0 = n_out10p0 * vec3(n_out13p0);

// TextureUniform:3
	vec3 n_out3p0;
	float n_out3p1;
	{
		vec4 n_tex_read = texture( Normal , n_out4p0.xy );
		n_out3p0 = n_tex_read.rgb;
		n_out3p1 = n_tex_read.a;
	}

// Output:0
	ALBEDO = n_out14p0;
	METALLIC = n_out5p0;
	ROUGHNESS = n_out6p0;
	EMISSION = n_out12p0;
	NORMALMAP = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -48.1263, 15.7542 )
nodes/fragment/0/position = Vector2( 1040, 80 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( 220, 60 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( 220, 340 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -20, 60 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( 760, 60 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( 760, 140 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( 240, -280 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( -20, -280 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 0, -200 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 560, -200 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 280, -100 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 780, -180 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 540, -20 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 760, 220 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 460, 260 )
nodes/fragment/connections = PoolIntArray( 3, 0, 0, 8, 4, 0, 2, 0, 4, 0, 3, 0, 5, 0, 0, 2, 6, 0, 0, 3, 8, 0, 7, 0, 9, 0, 7, 1, 7, 0, 10, 0, 11, 0, 10, 1, 10, 0, 12, 0, 12, 0, 0, 5, 13, 0, 12, 1, 2, 0, 14, 0, 14, 0, 0, 0, 15, 0, 14, 1 )
